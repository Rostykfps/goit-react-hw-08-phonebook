{"version":3,"file":"static/js/12.7565663b.chunk.js","mappings":"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","sources":["components/TransitionsModal/TransitionsModal.jsx","components/EditContactForm/EditContactForm.styled.js","components/EditContactForm/EditContactForm.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactList.jsx","components/AddContactBtn/AdContactBtn.styled.js","components/AddContactForm/AddContactForm.styled.js","components/AddContactForm/AddContactForm.jsx","components/AddContactBtn/AddContactBtn.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","components/BackToTop/BackToTop.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Backdrop from '@mui/material/Backdrop';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Fade from '@mui/material/Fade';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function TransitionsModal({ isShowModal, onClose, children }) {\n  return (\n    <div>\n      <Modal\n        disablePortal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={isShowModal}\n        onClose={onClose}\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            timeout: 500,\n          },\n        }}\n      >\n        <Fade in={isShowModal}>\n          <Box sx={style}>{children}</Box>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n\nTransitionsModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import styled from 'styled-components';\nimport MaskedInput from 'react-text-mask';\n\nexport const Title = styled.h3`\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 15px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-end;\n  margin-bottom: 25px;\n  gap: 20px;\n  padding: 15px;\n  border: 2px solid #000;\n  background-color: #f8f9fa;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n`;\nexport const FormInput = styled.input`\n  width: 260px;\n  padding-left: 38px;\n  font-size: 22px;\n  border-radius: 3px;\n`;\n\nexport const StyledInputMask = styled(MaskedInput)`\n  width: 260px;\n  padding-left: 38px;\n  font-size: 22px;\n  border-radius: 3px;\n`;\n\nexport const Button = styled.button`\n  color: #ffffff;\n  background-color: #0d6efd;\n  border: 1px solid #d2d2d2;\n  border-radius: 5px;\n  font-size: 16px;\n  padding: 6px 10px;\n  font-weight: 600;\n  outline: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #0a58ca;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { IconContext } from 'react-icons';\nimport { BsPersonVcard } from 'react-icons/bs';\nimport { TbPhone } from 'react-icons/tb';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/contactsOperations';\nimport {\n  Button,\n  Form,\n  FormInput,\n  FormLabel,\n  InputWrapper,\n  StyledInputMask,\n  Title,\n} from './EditContactForm.styled';\n\nexport const EditContactForm = ({ onClose, contact }) => {\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = { name, number };\n    dispatch(editContact({ id: [contact.id], data }));\n    setName('');\n    setNumber('');\n    onClose();\n  };\n\n  const mask = [\n    '+',\n    /\\d/,\n    /\\d/,\n    ' ',\n    '(',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    ')',\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    '-',\n    /\\d/,\n    /\\d/,\n    '-',\n    /\\d/,\n    /\\d/,\n  ];\n  return (\n    <IconContext.Provider value={{ color: '#0d6efd' }}>\n      <Title>Update contact</Title>\n      <Form onSubmit={handleSubmit}>\n        <FormLabel>\n          Name\n          <InputWrapper>\n            <FormInput\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={handleChange}\n            />\n            <BsPersonVcard size=\"1.5em\" className=\"react-icon\" />\n          </InputWrapper>\n        </FormLabel>\n        <FormLabel>\n          Number\n          <InputWrapper>\n            <StyledInputMask\n              mask={mask}\n              placeholder=\"+__ (___) ___-__-__\"\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+\\d{2} \\(\\d{3}\\) \\d{3}-\\d{2}-\\d{2}\"\n              title=\"Phone number must be digits and format '+99 (999) 999-99-99'\"\n              required\n              onChange={handleChange}\n            />\n            <TbPhone size=\"1.5em\" className=\"react-icon\" />\n          </InputWrapper>\n        </FormLabel>\n\n        <Button type=\"submit\">Update contact</Button>\n      </Form>\n    </IconContext.Provider>\n  );\n};\n\nEditContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const IsLoading = styled.div`\n  text-align: center;\n`;\n\nexport const ContactsList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const ContactsItem = styled.li`\n  padding-bottom: 5px;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: 22px;\n  font-weight: 500;\n  border-bottom: 1px solid #000000;\n`;\n\nexport const UpdateBtn = styled.button`\n  margin-left: auto;\n  background-color: #0d6efd;\n  border: 1px solid #d2d2d2;\n  border-radius: 5px;\n  font-size: 14px;\n  color: #ffffff;\n  padding: 5px 10px;\n  font-weight: 600;\n  outline: none;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #0a58ca;\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  margin-left: 10px;\n  background-color: #0d6efd;\n  border: 1px solid #d2d2d2;\n  border-radius: 5px;\n  font-size: 14px;\n  color: #ffffff;\n  padding: 5px 10px;\n  font-weight: 600;\n  outline: none;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #0a58ca;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { IconContext } from 'react-icons';\nimport { BsPersonVcard } from 'react-icons/bs';\nimport { TbPhone } from 'react-icons/tb';\nimport {\n  fetchContacts,\n  removeContact,\n} from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks';\nimport CircularProgress from '@mui/joy/CircularProgress';\nimport TransitionsModal from 'components/TransitionsModal/TransitionsModal';\nimport { EditContactForm } from 'components/EditContactForm/EditContactForm';\n\nimport {\n  ContactsItem,\n  ContactsList,\n  DeleteBtn,\n  IsLoading,\n  UpdateBtn,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [editedContact, setEditedContact] = useState(null);\n  const { contacts, filter, isLoading } = useContacts();\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return (\n      contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      ) ?? []\n    );\n  };\n\n  const toggleShowModal = () => {\n    setIsShowModal(!isShowModal);\n  };\n\n  const contactsToRender = getFilteredContacts();\n\n  return (\n    <>\n      <IconContext.Provider value={{ color: '#0d6efd', size: '1.5em' }}>\n        {isLoading ? (\n          <IsLoading>\n            <CircularProgress size=\"lg\" variant=\"solid\" />\n          </IsLoading>\n        ) : (\n          <ContactsList>\n            {contactsToRender.map(({ id, name, number }) => (\n              <ContactsItem key={id}>\n                <BsPersonVcard size=\"1.2em\" />\n                {name}: <TbPhone size=\"1.2em\" />\n                {number}\n                <UpdateBtn\n                  type=\"button\"\n                  onClick={() => {\n                    setEditedContact({ id, name, number });\n                    toggleShowModal();\n                  }}\n                >\n                  Update\n                </UpdateBtn>\n                <DeleteBtn\n                  type=\"button\"\n                  onClick={() => dispatch(removeContact(id))}\n                >\n                  Delete\n                </DeleteBtn>\n              </ContactsItem>\n            ))}\n\n            {isShowModal && (\n              <TransitionsModal\n                isShowModal={isShowModal}\n                onClose={toggleShowModal}\n              >\n                <EditContactForm\n                  onClose={toggleShowModal}\n                  contact={editedContact}\n                />\n              </TransitionsModal>\n            )}\n          </ContactsList>\n        )}\n      </IconContext.Provider>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  color: #ffffff;\n  background-color: #0d6efd;\n  border: 1px solid #d2d2d2;\n  border-radius: 5px;\n  font-size: 24px;\n  padding: 8px 15px;\n  font-weight: 600;\n  outline: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #0a58ca;\n  }\n`;\n","import styled from 'styled-components';\nimport MaskedInput from 'react-text-mask';\n\nexport const Title = styled.h3`\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 15px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-end;\n  margin-bottom: 25px;\n  gap: 20px;\n  padding: 15px;\n  border: 2px solid #000;\n  background-color: #f8f9fa;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n`;\nexport const FormInput = styled.input`\n  width: 260px;\n  padding-left: 38px;\n  font-size: 22px;\n  border-radius: 3px;\n`;\n\nexport const StyledInputMask = styled(MaskedInput)`\n  width: 260px;\n  padding-left: 38px;\n  font-size: 22px;\n  border-radius: 3px;\n`;\n\nexport const Button = styled.button`\n  color: #ffffff;\n  background-color: #0d6efd;\n  border: 1px solid #d2d2d2;\n  border-radius: 5px;\n  font-size: 16px;\n  padding: 6px 10px;\n  font-weight: 600;\n  outline: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #0a58ca;\n  }\n`;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addNewContact } from 'redux/contacts/contactsOperations';\n\nimport {\n  Button,\n  Form,\n  FormInput,\n  FormLabel,\n  InputWrapper,\n  StyledInputMask,\n  Title,\n} from './AddContactForm.styled';\nimport { useContacts } from 'hooks';\nimport { BsPersonVcard } from 'react-icons/bs';\nimport { IconContext } from 'react-icons';\nimport { TbPhone } from 'react-icons/tb';\n\nconst ContactForm = ({ onClose }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = { id: nanoid(), name, number };\n\n    const findContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (findContact) {\n      return toast.info(`${name} is already in contacts.`);\n    }\n\n    dispatch(addNewContact(newContact));\n\n    setName('');\n    setNumber('');\n\n    onClose();\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const mask = [\n    '+',\n    /\\d/,\n    /\\d/,\n    ' ',\n    '(',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    ')',\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    '-',\n    /\\d/,\n    /\\d/,\n    '-',\n    /\\d/,\n    /\\d/,\n  ];\n  return (\n    <IconContext.Provider value={{ color: '#0d6efd' }}>\n      <Title>Add new contact</Title>\n      <Form onSubmit={handleSubmit}>\n        <FormLabel>\n          Name\n          <InputWrapper>\n            <FormInput\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={handleChange}\n            />\n            <BsPersonVcard size=\"1.5em\" className=\"react-icon\" />\n          </InputWrapper>\n        </FormLabel>\n        <FormLabel>\n          Number\n          <InputWrapper>\n            <StyledInputMask\n              mask={mask}\n              placeholder=\"+__ (___) ___-__-__\"\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+\\d{2} \\(\\d{3}\\) \\d{3}-\\d{2}-\\d{2}\"\n              title=\"Phone number must be digits and format '+99 (999) 999-99-99'\"\n              required\n              onChange={handleChange}\n            />\n            <TbPhone size=\"1.5em\" className=\"react-icon\" />\n          </InputWrapper>\n        </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </IconContext.Provider>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import TransitionsModal from 'components/TransitionsModal/TransitionsModal';\nimport { Button } from './AdContactBtn.styled';\nimport ContactForm from 'components/AddContactForm/AddContactForm';\nimport { useState } from 'react';\n\nexport const AddContactBtn = () => {\n  const [isShowModal, setIsShowModal] = useState(false);\n  const toggleShowModal = () => {\n    setIsShowModal(!isShowModal);\n  };\n  return (\n    <>\n      <Button type=\"button\" onClick={() => toggleShowModal()}>\n        Add new contact\n      </Button>\n      {isShowModal && (\n        <TransitionsModal isShowModal={isShowModal} onClose={toggleShowModal}>\n          <ContactForm onClose={toggleShowModal} />\n        </TransitionsModal>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-left: 15px;\n  padding-right: 15px;\n  margin-bottom: 50px;\n`;\n\nexport const LabelFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 24px;\n  font-weight: 600;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n`;\n\nexport const InputFilter = styled.input`\n  width: 300px;\n  padding-left: 35px;\n  font-size: 22px;\n  border-radius: 4px;\n  outline-color: #0a58ca;\n`;\n","import { filterContacts } from 'redux/contacts/phoneBookSlice';\nimport { useDispatch } from 'react-redux';\nimport { PersonSearchOutlined } from '@mui/icons-material';\nimport { AddContactBtn } from 'components/AddContactBtn/AddContactBtn';\nimport { useContacts } from 'hooks';\n\nimport {\n  Container,\n  InputFilter,\n  InputWrapper,\n  LabelFilter,\n} from './Filter.styled';\n\nconst Filter = () => {\n  const { filter } = useContacts();\n\n  const dispatch = useDispatch();\n\n  const filteredContacts = ({ target: { value } }) =>\n    dispatch(filterContacts(value));\n\n  return (\n    <Container>\n      <LabelFilter>\n        Find contacts by name\n        <InputWrapper>\n          <InputFilter\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={filteredContacts}\n          />\n          <PersonSearchOutlined\n            sx={{\n              color: '#0d6efd',\n              fontSize: 28,\n              position: 'absolute',\n              left: '5px',\n            }}\n          />\n        </InputWrapper>\n      </LabelFilter>\n      <AddContactBtn />\n    </Container>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 800px;\n  margin: 40px auto;\n  padding: 0px 20px;\n`;\n\nexport const TitleContacts = styled.h2`\n  margin-bottom: 25px;\n  margin-left: 15px;\n  font-size: 42px;\n  font-weight: 700;\n`;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Fab from '@mui/material/Fab';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Fade from '@mui/material/Fade';\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = event => {\n    const anchor = (event.target.ownerDocument || document).querySelector(\n      '#back-to-top-anchor'\n    );\n\n    if (anchor) {\n      anchor.scrollIntoView({\n        block: 'center',\n      });\n    }\n  };\n\n  return (\n    <Fade in={trigger}>\n      <Box\n        onClick={handleClick}\n        role=\"presentation\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n      >\n        {children}\n      </Box>\n    </Fade>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.object.isRequired,\n  window: PropTypes.func,\n};\n\nexport default function BackToTop(props) {\n  const { children } = props;\n  return (\n    <React.Fragment>\n      <Container>{children}</Container>\n      <ScrollTop {...props}>\n        <Fab size=\"small\" aria-label=\"scroll back to top\">\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </React.Fragment>\n  );\n}\n","import ContactList from 'components/ContactsList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Container, TitleContacts } from './Contacts.styled';\nimport BackToTop from 'components/BackToTop/BackToTop';\n\nexport default function Contacts() {\n  return (\n    <Container>\n      <TitleContacts>Contacts</TitleContacts>\n      <Filter />\n\n      <BackToTop>\n        <ContactList />\n      </BackToTop>\n    </Container>\n  );\n}\n"],"names":["style","position","top","left","transform","bgcolor","border","boxShadow","p","TransitionsModal","_ref","isShowModal","onClose","children","_jsx","Modal","disablePortal","open","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","Fade","in","Box","sx","Title","styled","_templateObject","_taggedTemplateLiteral","Form","_templateObject2","FormLabel","_templateObject3","InputWrapper","_templateObject4","FormInput","_templateObject5","StyledInputMask","MaskedInput","_templateObject6","Button","_templateObject7","EditContactForm","contact","_useState","useState","name","_useState2","_slicedToArray","setName","_useState3","number","_useState4","setNumber","dispatch","useDispatch","handleChange","_ref2","_ref2$target","target","value","_jsxs","IconContext","color","onSubmit","event","preventDefault","data","editContact","id","type","pattern","title","required","onChange","BsPersonVcard","size","className","mask","placeholder","TbPhone","IsLoading","ContactsList","ContactsItem","UpdateBtn","DeleteBtn","useEffect","fetchContacts","setIsShowModal","editedContact","setEditedContact","_useContacts","useContacts","contacts","filter","isLoading","toggleShowModal","contactsToRender","_contacts$filter","normalizedFilter","toLowerCase","includes","getFilteredContacts","_Fragment","CircularProgress","variant","map","onClick","removeContact","newContact","nanoid","find","toast","concat","addNewContact","AddContactBtn","ContactForm","Container","LabelFilter","InputFilter","filterContacts","PersonSearchOutlined","fontSize","TitleContacts","ScrollTop","props","window","trigger","useScrollTrigger","undefined","disableHysteresis","threshold","anchor","ownerDocument","document","querySelector","scrollIntoView","block","role","bottom","right","BackToTop","React","_objectSpread","Fab","KeyboardArrowUpIcon","Contacts","Filter","ContactList"],"sourceRoot":""}